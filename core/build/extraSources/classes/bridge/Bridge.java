// Code generated by gobind. DO NOT EDIT.

// Java class bridge.Bridge is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/kr328/cfa/bridge
package bridge;

import go.Seq;

public abstract class Bridge {
	static {
		Seq.touch(); // for loading the native library
		_init();
	}
	
	private Bridge() {} // uninstantiable
	
	// touch is called from other bound packages to initialize this package
	public static void touch() {}
	
	private static native void _init();
	
	private static final class proxyDoneCallback implements Seq.Proxy, DoneCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyDoneCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void done();
		public native void doneWithError(java.lang.Exception p0);
	}
	private static final class proxyLogCallback implements Seq.Proxy, LogCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyLogCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onLogEvent(String level, String payload);
	}
	private static final class proxyLogs implements Seq.Proxy, Logs {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyLogs(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onEvent(String level, String payload);
	}
	private static final class proxyProxyCollection implements Seq.Proxy, ProxyCollection {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyProxyCollection(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native boolean add(ProxyItem proxy);
	}
	private static final class proxyProxyGroupCollection implements Seq.Proxy, ProxyGroupCollection {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyProxyGroupCollection(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native boolean add(ProxyGroupItem proxy);
	}
	private static final class proxyTunCallback implements Seq.Proxy, TunCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyTunCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onCreateSocket(long fd);
		public native void onStop();
	}
	
	
	public static native void downloadProfileAndCheck(String url, String output, String baseDir, DoneCallback callback);
	public static native void initCore(byte[] geoipDatabase, String homeDir, String version);
	public static native void loadProfileFile(String path, String baseDir, DoneCallback callback);
	public static native void queryAllProxyGroups(ProxyGroupCollection collection);
	public static native Traffic queryBandwidth();
	public static native TunnelGeneral queryGeneral();
	public static native Traffic queryTraffic();
	public static native void readProfileAndCheck(long fd, String output, String baseDir, DoneCallback callback);
	public static native void reset();
	public static native void resetDnsAppend(String dns);
	public static native void setDnsOverrideEnabled(boolean enabled);
	public static native void setLogCallback(LogCallback callback);
	public static native void setProxyMode(String mode);
	public static native boolean setSelectedProxy(String name, String proxy);
	public static native void startTunDevice(long fd, long mtu, String gateway, String mirror, String dns, TunCallback cb) throws Exception;
	public static native void startUrlTest(String group, DoneCallback callback);
	public static native void stopTunDevice();
}
