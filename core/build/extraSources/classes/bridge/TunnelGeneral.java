// Code generated by gobind. DO NOT EDIT.

// Java class bridge.TunnelGeneral is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java github.com/kr328/cfa/bridge
package bridge;

import go.Seq;

public final class TunnelGeneral implements Seq.Proxy {
	static { Bridge.touch(); }
	
	private final int refnum;
	
	@Override public final int incRefnum() {
	      Seq.incGoRef(refnum, this);
	      return refnum;
	}
	
	TunnelGeneral(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
	
	public TunnelGeneral() { this.refnum = __New(); Seq.trackGoRef(refnum, this); }
	
	private static native int __New();
	
	public final native String getMode();
	public final native void setMode(String v);
	
	public final native long getHTTPPort();
	public final native void setHTTPPort(long v);
	
	public final native long getSocksPort();
	public final native void setSocksPort(long v);
	
	public final native long getRedirectPort();
	public final native void setRedirectPort(long v);
	
	@Override public boolean equals(Object o) {
		if (o == null || !(o instanceof TunnelGeneral)) {
		    return false;
		}
		TunnelGeneral that = (TunnelGeneral)o;
		String thisMode = getMode();
		String thatMode = that.getMode();
		if (thisMode == null) {
			if (thatMode != null) {
			    return false;
			}
		} else if (!thisMode.equals(thatMode)) {
		    return false;
		}
		long thisHTTPPort = getHTTPPort();
		long thatHTTPPort = that.getHTTPPort();
		if (thisHTTPPort != thatHTTPPort) {
		    return false;
		}
		long thisSocksPort = getSocksPort();
		long thatSocksPort = that.getSocksPort();
		if (thisSocksPort != thatSocksPort) {
		    return false;
		}
		long thisRedirectPort = getRedirectPort();
		long thatRedirectPort = that.getRedirectPort();
		if (thisRedirectPort != thatRedirectPort) {
		    return false;
		}
		return true;
	}
	
	@Override public int hashCode() {
	    return java.util.Arrays.hashCode(new Object[] {getMode(), getHTTPPort(), getSocksPort(), getRedirectPort()});
	}
	
	@Override public String toString() {
		StringBuilder b = new StringBuilder();
		b.append("TunnelGeneral").append("{");
		b.append("Mode:").append(getMode()).append(",");
		b.append("HTTPPort:").append(getHTTPPort()).append(",");
		b.append("SocksPort:").append(getSocksPort()).append(",");
		b.append("RedirectPort:").append(getRedirectPort()).append(",");
		return b.append("}").toString();
	}
}

